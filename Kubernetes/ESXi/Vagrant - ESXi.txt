# IMAGES
# https://app.vagrantup.com/ubuntu
# generic/ubuntu1604" - A build environment for use in cross platform development. "vmware_desktop" provider must be used
# DHCP must be configured to assign IP address to worker/master nodes, there must be internet access.
# NOTE: ovftool installer for windows doesn't put ovftool.exe in your path. You can manually set your path, or install ovftool in the \HashiCorp\Vagrant\bin directory.
# Install Vagrant plugins (vagrant-host-shell, vagrant-reload, vagrant-vmware-esxi, vagrant-winrm-syncedfolders)
# Give SSH and Shell access on ESXi for the the ESXi root user
#
# MASTER
# you can add label to nodes
# kubectl label node k8-worker1 node-role.kubernetes.io/worker=worker
# kubectl label node k8-worker2 node-role.kubernetes.io/worker=worker
# kubectl label node k8-worker3 node-role.kubernetes.io/worker=worker
# kubectl label node k8-worker4 node-role.kubernetes.io/worker=worker
#
# WORKER
# Copy the kubeadm join command that was printed by the kubeadm init command (add sudo)

Vagrant.configure("2") do |config|	
    config.vm.define "master" do |master|
		master.vm.box = "generic/ubuntu1604"
        master.vm.hostname = "k8-1-master"
        master.vm.define "k8-1-master"
		master.vm.provision "shell", inline: $masterscript
		master.vm.provider :vmware_esxi do |esxi|
		  esxi.esxi_hostname = "192.168.200.10"
		  esxi.esxi_username = "root"
		  esxi.esxi_password = "prompt:"
		  esxi.esxi_virtual_network = "VM-Management"
		  esxi.esxi_disk_store = "datastore1"
		  esxi.guest_name = "k8-1-master"
		  esxi.guest_memsize = "2048"
		  esxi.guest_numvcpus = "2"
		  esxi.guest_nic_type = 'vmxnet3'
	          esxi.local_allow_overwrite = 'True'
		  esxi.guest_mac_address = ["00:50:56:3f:01:01"]
	    end
    end
	config.vm.define "worker1" do |worker1|    
		worker1.vm.box = "generic/ubuntu1604"
		worker1.vm.hostname = "k8-1-worker1"
		worker1.vm.define "k8-1-worker1"
		worker1.vm.provision "shell", inline: $workerscript
		worker1.vm.provider :vmware_esxi do |esxi|
		  esxi.esxi_hostname = "192.168.200.10"
		  esxi.esxi_username = "root"
		  esxi.esxi_password = "prompt:"
		  esxi.esxi_virtual_network = "VM-Management"
		  esxi.esxi_disk_store = "datastore1"
		  esxi.guest_name = "k8-1-worker1"
		  esxi.guest_memsize = "2048"
		  esxi.guest_numvcpus = "2"
		  esxi.guest_nic_type = "vmxnet3"
	          esxi.local_allow_overwrite = "True"
 		  esxi.guest_mac_address = ["00:50:56:3f:02:01"]
		end
	end
	config.vm.define "worker2" do |worker2|
		worker2.vm.box = "generic/ubuntu1604"
		worker2.vm.hostname = "k8-1-worker2"	
		worker2.vm.define "k8-1-worker2"
		worker2.vm.provision "shell", inline: $workerscript
		worker2.vm.provider :vmware_esxi do |esxi|
		  esxi.esxi_hostname = "192.168.200.10"
		  esxi.esxi_username = "root"
		  esxi.esxi_password = "prompt:"
		  esxi.esxi_virtual_network = "VM-Management"
		  esxi.esxi_disk_store = "datastore1"
		  esxi.guest_name = "k8-1-worker2"
		  esxi.guest_memsize = "2048"
		  esxi.guest_numvcpus = "2"
		  esxi.guest_nic_type = "vmxnet3"
	          esxi.local_allow_overwrite = "True"
		  esxi.guest_mac_address = ["00:50:56:3f:02:02"]
		end
	end
	config.vm.define "worker3" do |worker3|
		worker3.vm.box = "generic/ubuntu1604"
		worker3.vm.hostname = "k8-1-worker3"	
		worker3.vm.define "k8-1-worker3"
		worker3.vm.provision "shell", inline: $workerscript
		worker3.vm.provider :vmware_esxi do |esxi|
		  esxi.esxi_hostname = "192.168.200.10"
		  esxi.esxi_username = "root"
		  esxi.esxi_password = "prompt:"
		  esxi.esxi_virtual_network = "VM-Management"
		  esxi.esxi_disk_store = "datastore1"
		  esxi.guest_name = "k8-1-worker3"
		  esxi.guest_memsize = "2048"
		  esxi.guest_numvcpus = "2"
		  esxi.guest_nic_type = "vmxnet3"
	          esxi.local_allow_overwrite = "True"
		  esxi.guest_mac_address = ["00:50:56:3f:02:03"]
		end
	end
	config.vm.define "worker4" do |worker4|
		worker4.vm.box = "generic/ubuntu1604"
		worker4.vm.hostname = "k8-1-worker4"	
		worker4.vm.define "k8-1-worker4"
		worker4.vm.provision "shell", inline: $workerscript
		worker4.vm.provider :vmware_esxi do |esxi|
		  esxi.esxi_hostname = "192.168.200.10"
		  esxi.esxi_username = "root"
		  esxi.esxi_password = "prompt:"
		  esxi.esxi_virtual_network = "VM-Management"
		  esxi.esxi_disk_store = "datastore1"
		  esxi.guest_name = "k8-1-worker4"
		  esxi.guest_memsize = "2048"
		  esxi.guest_numvcpus = "2"
		  esxi.guest_nic_type = "vmxnet3"
	          esxi.local_allow_overwrite = "True"
		  esxi.guest_mac_address = ["00:50:56:3f:02:04"]
		end
	end
end


$masterscript = <<MASTERSCRIPT
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update
sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu
sudo apt-mark hold docker-ce
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet=1.14.5-00 kubeadm=1.14.5-00 kubectl=1.14.5-00
sudo apt-mark hold kubelet kubeadm kubectl
swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
IP_ADDR=`ifconfig eth0 | grep Mask | awk '{print $2}'| cut -f2 -d:`
HOST_NAME=$(hostname -s)
sudo kubeadm init --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR,192.168.100.160 --node-name $HOST_NAME --pod-network-cidr=192.170.0.0/16
echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml
MASTERSCRIPT


$workerscript = <<-WORKERSCRIPT
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update
sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu
sudo apt-mark hold docker-ce
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet=1.14.5-00 kubeadm=1.14.5-00 kubectl=1.14.5-00
sudo apt-mark hold kubelet kubeadm kubectl
echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
sudo swapoff -a
WORKERSCRIPT


